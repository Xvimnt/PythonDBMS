/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ViewContainerRef, ComponentFactoryResolver, ElementRef, HostListener, forwardRef, ChangeDetectorRef, Input, KeyValueDiffers, Output, EventEmitter, Renderer2 } from '@angular/core';
import { DaterangepickerComponent } from './daterangepicker.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as _moment from 'moment';
/** @type {?} */
var moment = _moment;
var DaterangepickerDirective = /** @class */ (function () {
    function DaterangepickerDirective(viewContainerRef, _changeDetectorRef, _componentFactoryResolver, _el, _renderer, differs) {
        this.viewContainerRef = viewContainerRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._el = _el;
        this._renderer = _renderer;
        this.differs = differs;
        this._onChange = Function.prototype;
        this._onTouched = Function.prototype;
        this._validatorChange = Function.prototype;
        this.showApplyOnlyForCustom = false;
        this.material = false;
        this.showCancel = false;
        this._locale = {};
        this._endKey = 'endDate';
        this._startKey = 'startDate';
        this.notForChangesProperty = [
            'locale',
            'endKey',
            'startKey'
        ];
        this.onChange = new EventEmitter();
        this.rangeClicked = new EventEmitter();
        this.datesUpdated = new EventEmitter();
        /** @type {?} */
        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(DaterangepickerComponent);
        viewContainerRef.clear();
        /** @type {?} */
        var componentRef = viewContainerRef.createComponent(componentFactory);
        this.picker = (/** @type {?} */ (componentRef.instance));
        this.picker.inline = false; // set inline to false for all directive usage
    }
    Object.defineProperty(DaterangepickerDirective.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== null) {
                this._locale = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DaterangepickerDirective.prototype, "startKey", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== null) {
                this._startKey = value;
            }
            else {
                this._startKey = 'startDate';
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DaterangepickerDirective.prototype, "endKey", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== null) {
                this._endKey = value;
            }
            else {
                this._endKey = 'endDate';
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DaterangepickerDirective.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value || null;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this._onChange(val);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DaterangepickerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.picker.rangeClicked.asObservable().subscribe(function (range) {
            _this.rangeClicked.emit(range);
        });
        this.picker.datesUpdated.asObservable().subscribe(function (range) {
            _this.datesUpdated.emit(range);
        });
        this.picker.choosedDate.asObservable().subscribe(function (change) {
            if (change) {
                /** @type {?} */
                var value = {};
                value[_this._startKey] = change.startDate;
                value[_this._endKey] = change.endDate;
                _this.value = value;
                _this.onChange.emit(value);
                if (typeof change.chosenLabel === 'string') {
                    _this._el.nativeElement.value = change.chosenLabel;
                }
            }
        });
        this.picker.firstMonthDayClass = this.firstMonthDayClass;
        this.picker.lastMonthDayClass = this.lastMonthDayClass;
        this.picker.emptyWeekRowClass = this.emptyWeekRowClass;
        this.picker.firstDayOfNextMonthClass = this.firstDayOfNextMonthClass;
        this.picker.lastDayOfPreviousMonthClass = this.lastDayOfPreviousMonthClass;
        this.localeDiffer = this.differs.find(this.locale).create();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DaterangepickerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var change in changes) {
            if (changes.hasOwnProperty(change)) {
                if (this.notForChangesProperty.indexOf(change) === -1) {
                    this.picker[change] = changes[change].currentValue;
                }
            }
        }
    };
    /**
     * @return {?}
     */
    DaterangepickerDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.localeDiffer) {
            /** @type {?} */
            var changes = this.localeDiffer.diff(this.locale);
            if (changes) {
                this.picker.updateLocale(this.locale);
            }
        }
    };
    /**
     * @return {?}
     */
    DaterangepickerDirective.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this._onTouched();
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    DaterangepickerDirective.prototype.open = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        this.picker.show(event);
        this.setPosition();
    };
    /**
     * @param {?=} e
     * @return {?}
     */
    DaterangepickerDirective.prototype.hide = /**
     * @param {?=} e
     * @return {?}
     */
    function (e) {
        this.picker.hide(e);
    };
    /**
     * @param {?=} e
     * @return {?}
     */
    DaterangepickerDirective.prototype.toggle = /**
     * @param {?=} e
     * @return {?}
     */
    function (e) {
        if (this.picker.isShown) {
            this.hide(e);
        }
        else {
            this.open(e);
        }
    };
    /**
     * @return {?}
     */
    DaterangepickerDirective.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.picker.clear();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DaterangepickerDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this.setValue(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DaterangepickerDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DaterangepickerDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    DaterangepickerDirective.prototype.setValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            if (val[this._startKey]) {
                this.picker.setStartDate(val[this._startKey]);
            }
            if (val[this._endKey]) {
                this.picker.setEndDate(val[this._endKey]);
            }
            this.picker.calculateChosenLabel();
            if (this.picker.chosenLabel) {
                this._el.nativeElement.value = this.picker.chosenLabel;
            }
        }
        else {
            //
        }
    };
    /**
     * Set position of the calendar
     */
    /**
     * Set position of the calendar
     * @return {?}
     */
    DaterangepickerDirective.prototype.setPosition = /**
     * Set position of the calendar
     * @return {?}
     */
    function () {
        /** @type {?} */
        var style;
        /** @type {?} */
        var containerTop;
        /** @type {?} */
        var container = this.picker.pickerContainer.nativeElement;
        /** @type {?} */
        var element = this._el.nativeElement;
        if (this.drops && this.drops == 'up') {
            containerTop = (element.offsetTop - container.clientHeight) + 'px';
        }
        else {
            containerTop = 'auto';
        }
        if (this.opens == 'left') {
            style = {
                top: containerTop,
                left: (element.offsetLeft - container.clientWidth + element.clientWidth) + 'px',
                right: 'auto'
            };
        }
        else if (this.opens == 'center') {
            style = {
                top: containerTop,
                left: (element.offsetLeft + element.clientWidth / 2
                    - container.clientWidth / 2) + 'px',
                right: 'auto'
            };
        }
        else {
            style = {
                top: containerTop,
                left: element.offsetLeft + 'px',
                right: 'auto'
            };
        }
        if (style) {
            this._renderer.setStyle(container, 'top', style.top);
            this._renderer.setStyle(container, 'left', style.left);
            this._renderer.setStyle(container, 'right', style.right);
        }
    };
    /**
     * For click outside of the calendar's container
     * @param event event object
     * @param targetElement target element object
     */
    /**
     * For click outside of the calendar's container
     * @param {?} event event object
     * @param {?} targetElement target element object
     * @return {?}
     */
    DaterangepickerDirective.prototype.outsideClick = /**
     * For click outside of the calendar's container
     * @param {?} event event object
     * @param {?} targetElement target element object
     * @return {?}
     */
    function (event, targetElement) {
        if (!targetElement) {
            return;
        }
        if (targetElement.classList.contains('ngx-daterangepicker-action')) {
            return;
        }
        /** @type {?} */
        var clickedInside = this._el.nativeElement.contains(targetElement);
        if (!clickedInside) {
            this.hide();
        }
    };
    DaterangepickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[ngxDaterangepickerMd]',
                    host: {
                        '(keyup.esc)': 'hide()',
                        '(blur)': 'onBlur()',
                        '(focus)': 'open()',
                        '(click)': 'open()'
                    },
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return DaterangepickerDirective; }), multi: true
                        }
                    ]
                },] }
    ];
    /** @nocollapse */
    DaterangepickerDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: Renderer2 },
        { type: KeyValueDiffers }
    ]; };
    DaterangepickerDirective.propDecorators = {
        showApplyOnlyForCustom: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        autoApply: [{ type: Input }],
        alwaysShowCalendars: [{ type: Input }],
        showCustomRangeLabel: [{ type: Input }],
        linkedCalendars: [{ type: Input }],
        singleDatePicker: [{ type: Input }],
        showWeekNumbers: [{ type: Input }],
        showISOWeekNumbers: [{ type: Input }],
        showDropdowns: [{ type: Input }],
        isInvalidDate: [{ type: Input }],
        isCustomDate: [{ type: Input }],
        showClearButton: [{ type: Input }],
        ranges: [{ type: Input }],
        opens: [{ type: Input }],
        drops: [{ type: Input }],
        lastMonthDayClass: [{ type: Input }],
        emptyWeekRowClass: [{ type: Input }],
        firstDayOfNextMonthClass: [{ type: Input }],
        lastDayOfPreviousMonthClass: [{ type: Input }],
        keepCalendarOpeningWithRange: [{ type: Input }],
        showRangeLabelOnInput: [{ type: Input }],
        material: [{ type: Input }],
        showCancel: [{ type: Input }],
        locale: [{ type: Input }],
        _endKey: [{ type: Input }],
        startKey: [{ type: Input }],
        endKey: [{ type: Input }],
        onChange: [{ type: Output, args: ['change',] }],
        rangeClicked: [{ type: Output, args: ['rangeClicked',] }],
        datesUpdated: [{ type: Output, args: ['datesUpdated',] }],
        outsideClick: [{ type: HostListener, args: ['document:click', ['$event', '$event.target'],] }]
    };
    return DaterangepickerDirective;
}());
export { DaterangepickerDirective };
if (false) {
    /** @type {?} */
    DaterangepickerDirective.prototype.picker;
    /** @type {?} */
    DaterangepickerDirective.prototype._onChange;
    /** @type {?} */
    DaterangepickerDirective.prototype._onTouched;
    /** @type {?} */
    DaterangepickerDirective.prototype._validatorChange;
    /** @type {?} */
    DaterangepickerDirective.prototype._value;
    /** @type {?} */
    DaterangepickerDirective.prototype.localeDiffer;
    /** @type {?} */
    DaterangepickerDirective.prototype.showApplyOnlyForCustom;
    /** @type {?} */
    DaterangepickerDirective.prototype.minDate;
    /** @type {?} */
    DaterangepickerDirective.prototype.maxDate;
    /** @type {?} */
    DaterangepickerDirective.prototype.autoApply;
    /** @type {?} */
    DaterangepickerDirective.prototype.alwaysShowCalendars;
    /** @type {?} */
    DaterangepickerDirective.prototype.showCustomRangeLabel;
    /** @type {?} */
    DaterangepickerDirective.prototype.linkedCalendars;
    /** @type {?} */
    DaterangepickerDirective.prototype.singleDatePicker;
    /** @type {?} */
    DaterangepickerDirective.prototype.showWeekNumbers;
    /** @type {?} */
    DaterangepickerDirective.prototype.showISOWeekNumbers;
    /** @type {?} */
    DaterangepickerDirective.prototype.showDropdowns;
    /** @type {?} */
    DaterangepickerDirective.prototype.isInvalidDate;
    /** @type {?} */
    DaterangepickerDirective.prototype.isCustomDate;
    /** @type {?} */
    DaterangepickerDirective.prototype.showClearButton;
    /** @type {?} */
    DaterangepickerDirective.prototype.ranges;
    /** @type {?} */
    DaterangepickerDirective.prototype.opens;
    /** @type {?} */
    DaterangepickerDirective.prototype.drops;
    /** @type {?} */
    DaterangepickerDirective.prototype.firstMonthDayClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.lastMonthDayClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.emptyWeekRowClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.firstDayOfNextMonthClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.lastDayOfPreviousMonthClass;
    /** @type {?} */
    DaterangepickerDirective.prototype.keepCalendarOpeningWithRange;
    /** @type {?} */
    DaterangepickerDirective.prototype.showRangeLabelOnInput;
    /** @type {?} */
    DaterangepickerDirective.prototype.material;
    /** @type {?} */
    DaterangepickerDirective.prototype.showCancel;
    /** @type {?} */
    DaterangepickerDirective.prototype._locale;
    /** @type {?} */
    DaterangepickerDirective.prototype._endKey;
    /** @type {?} */
    DaterangepickerDirective.prototype._startKey;
    /** @type {?} */
    DaterangepickerDirective.prototype.notForChangesProperty;
    /** @type {?} */
    DaterangepickerDirective.prototype.onChange;
    /** @type {?} */
    DaterangepickerDirective.prototype.rangeClicked;
    /** @type {?} */
    DaterangepickerDirective.prototype.datesUpdated;
    /** @type {?} */
    DaterangepickerDirective.prototype.viewContainerRef;
    /** @type {?} */
    DaterangepickerDirective.prototype._changeDetectorRef;
    /** @type {?} */
    DaterangepickerDirective.prototype._componentFactoryResolver;
    /** @type {?} */
    DaterangepickerDirective.prototype._el;
    /** @type {?} */
    DaterangepickerDirective.prototype._renderer;
    /** @type {?} */
    DaterangepickerDirective.prototype.differs;
}

//# sourceMappingURL=data:application/json;base64,